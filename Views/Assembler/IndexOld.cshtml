@{
    ViewData["Title"] = "Assembler";
}

@{
    ViewData["Title"] = "Terminal";
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.9.6/ace.js"></script>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<link rel="stylesheet" href="~/css/xterm.css" />
<script src="~/js/xterm.js"></script>
<script src="~/js/xterm-addon-fit.js"></script>
<script src="https://cdn.tailwindcss.com"></script>

<div class="w-screen min-h-screen flex flex-col gap-4 bg-base-200">
    <div class="grid grid-rows-2 lg:grid-rows-1 grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-16 p-12 lg:p-24 min-h-screen w-full">
        <div class="flex flex-col gap-4">
            <div id="terminal" class="shadow-xl"></div>
        </div>
        <div class="flex flex-col gap-4">
            <div>
                <p class="font-bold text-md">ACC</p>
                <p id="acc" class="h-16 text-5xl"></p>

                <p class="font-bold text-md">IX</p>
                <p id="ix" class="h-16 text-5xl"></p>
            </div>
            <table class="table-fixed" id="memory">
            <thead>
                <tr>
                <th>Address</th>
                <th>Content</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
            </table>
        </div>
    </div>
    <p class="absolute bottom-2 right-6 opacity-10 text-sm">Developed by Jingcheng Yang</p>
</div>

<script src="~/js/jassembler.js"></script>

<div id="terminal"></div>
<script>
    var term = new Terminal();
    term.open(document.getElementById('terminal'));
    term.setOption('theme', {
        background: '#EEEEEE',
        foreground: '#000000'
    });

    Initialize(term);

    //term.write('Hello from \x1B[1;3;31mxterm.js\x1B[0m $ ')
    input = '';

    /*term.onKey(e => {
        term.write(e.key);
        console.log(e.key);
        if (e.key == '\r') {
            if (input != '') {
                AssembleLine(input);
                //console.log(input);
                input = '';
            }
            term.write('\n');
        }
        else {
            input += e.key;
        }
    })*/

    term.onData(e => {
      switch (e) {
        case '\u0003': // Ctrl+C
            term.write('^C');
            break;
        case '\r': // Enter
            AssembleLine(input);
            input = '';
            term.write('\r\n');
            break;
        case '\u007F': // Backspace (DEL)
            // Do not delete the prompt
            if (term._core.buffer.x > 0) {
                term.write('\b \b');
                if (input.length > 0) {
                    input = input.substr(0, input.length - 1);
                }
            }
          break;
        default: // Print all other characters for demo
        if (e >= String.fromCharCode(0x20) && e <= String.fromCharCode(0x7E) || e >= '\u00a0') {
            input += e;
            term.write(e);
        }
      }
    });
</script>